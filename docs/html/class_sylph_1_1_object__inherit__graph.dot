digraph G
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{Sylph::Object\n||}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node2 [label="{Sylph::Array\< byte \>\n|+ length\l- _length\l|+ begin()\l+ begin()\l+ end()\l+ end()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ ~Array()\l+ copy()\l+ carray()\l+ carray()\l+ filter()\l+ clear()\l+ operator=()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ fromPointer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_array.html"];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node3 [label="{Sylph::Array\< EntryPtr \>\n|+ length\l- _length\l|+ begin()\l+ begin()\l+ end()\l+ end()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ ~Array()\l+ copy()\l+ carray()\l+ carray()\l+ filter()\l+ clear()\l+ operator=()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ fromPointer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_array.html"];
  Node1 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node4 [label="{Sylph::Array\< uchar \>\n|+ length\l- _length\l|+ begin()\l+ begin()\l+ end()\l+ end()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ ~Array()\l+ copy()\l+ carray()\l+ carray()\l+ filter()\l+ clear()\l+ operator=()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ fromPointer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_array.html"];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node5 [label="{Sylph::Collection\< T \>\n||+ add()\l+ addAll()\l+ clear()\l+ contains()\l+ containsAll()\l+ operator==()\l+ operator!=()\l+ hashCode()\l+ empty()\l+ filter()\l+ remove()\l+ removeAll()\l+ retainAll()\l+ size()\l+ toArray()\l+ operator Array\< T \>()\l+ operator\<\<()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_collection.html"];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node6 [label="{Sylph::ForwardIterator\< Entry, iterator \>\n|+ _end_reached_\l|+ ForwardIterator()\l+ ForwardIterator()\l+ ~ForwardIterator()\l+ operator*()\l+ operator*()\l+ operator-\>()\l+ operator-\>()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator==()\l+ operator!=()\l+ construct()\l+ current()\l+ next()\l+ hasNext()\l+ equals()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_forward_iterator.html"];
  Node1 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node7 [label="{Sylph::ForwardIterator\< String, iterator \>\n|+ _end_reached_\l|+ ForwardIterator()\l+ ForwardIterator()\l+ ~ForwardIterator()\l+ operator*()\l+ operator*()\l+ operator-\>()\l+ operator-\>()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator==()\l+ operator!=()\l+ construct()\l+ current()\l+ next()\l+ hasNext()\l+ equals()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_forward_iterator.html"];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node8 [label="{Sylph::ForwardIterator\< T, I \>\n|+ _end_reached_\l|+ ForwardIterator()\l+ ForwardIterator()\l+ ~ForwardIterator()\l+ operator*()\l+ operator*()\l+ operator-\>()\l+ operator-\>()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator==()\l+ operator!=()\l+ construct()\l+ current()\l+ next()\l+ hasNext()\l+ equals()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_forward_iterator.html"];
  Node1 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node9 [label="{Sylph::ForwardIterator\< T, iterator \>\n|+ _end_reached_\l|+ ForwardIterator()\l+ ForwardIterator()\l+ ~ForwardIterator()\l+ operator*()\l+ operator*()\l+ operator-\>()\l+ operator-\>()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator++()\l+ operator==()\l+ operator!=()\l+ construct()\l+ current()\l+ next()\l+ hasNext()\l+ equals()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_forward_iterator.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node10 [label="{Sylph::Any\n|- content\l|+ Any()\l+ Any()\l+ Any()\l+ ~Any()\l+ empty()\l+ type()\l+ operator=()\l+ operator=()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_any.html",tooltip="Wrapper class for any kind of class."];
  Node1 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node11 [label="{Sylph::Application\n|+ self_app\l# _location\l|+ location()\l+ init()\l- Application()\l- ~Application()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_application.html",tooltip="Class representing an application."];
  Node11 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node12 [label="{Sylph::ApplicationSelf\n|- _appName\l- _appType\l|+ appName()\l+ appType()\l+ fail()\l+ fail()\l+ bundle()\l+ resourceDir()\l+ resource()\l+ libraryDir()\l+ pluginDir()\l+ plugindisabledDir()\l+ systemLibraryDir()\l+ systemSettings()\l+ systemSettingsDir()\l+ systemPluginDir()\l+ systemPluginDisabledDir()\l+ systemResourceDir()\l+ systemResource()\l+ userHome()\l+ userLibraryDir()\l+ userSettings()\l+ userSettingsDir()\l+ userPluginDir()\l+ userPluginDisabledDir()\l+ userResourceDir()\l+ userResource()\l+ prefix()\l# ApplicationSelf()\l# ~ApplicationSelf()\l# _fail()\l# _fail()\l- _preconstruct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_application_self.html",tooltip="An Application representing the currently running application."];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node13 [label="{Sylph::Array\< T \>\n|+ length\l- _length\l|+ begin()\l+ end()\l+ begin()\l+ end()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ ~Array()\l+ copy()\l+ carray()\l+ carray()\l+ filter()\l+ clear()\l+ operator=()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ operator[]()\l+ fromPointer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_array.html",tooltip="Array provides a safe array."];
  Node13 -> Node2 [dir=back,color="orange",fontsize="10",style="dashed",label="\< byte \>",fontname="FreeSans"];
  Node13 -> Node4 [dir=back,color="orange",fontsize="10",style="dashed",label="\< uchar \>",fontname="FreeSans"];
  Node13 -> Node3 [dir=back,color="orange",fontsize="10",style="dashed",label="\< EntryPtr \>",fontname="FreeSans"];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node14 [label="{Sylph::BoolConvertible_base\n||# this_type_does_not_support_comparisons()\l# BoolConvertible_base()\l# BoolConvertible_base()\l# operator=()\l# ~BoolConvertible_base()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_bool_convertible__base.html",tooltip="Abstract base class for BoolConvertible."];
  Node14 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node15 [label="{Sylph::BoolConvertible\< InputStream \>\n||+ operator bool_type()\l# ~BoolConvertible()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_bool_convertible.html"];
  Node14 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node16 [label="{Sylph::BoolConvertible\< OutputStream \>\n||+ operator bool_type()\l# ~BoolConvertible()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_bool_convertible.html"];
  Node14 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node17 [label="{Sylph::BoolConvertible\< PrintWriter \>\n||+ operator bool_type()\l# ~BoolConvertible()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_bool_convertible.html"];
  Node14 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node18 [label="{Sylph::BoolConvertible\< String \>\n||+ operator bool_type()\l# ~BoolConvertible()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_bool_convertible.html"];
  Node18 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node19 [label="{Sylph::String\n|- strdata\l|+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ String()\l+ ~String()\l+ length()\l+ at()\l+ ascii()\l+ utf8()\l+ utf16()\l+ toLowerCase()\l+ toUpperCase()\l+ equalsIgnoreCase()\l+ endsWith()\l+ startsWith()\l+ contains()\l+ trim()\l+ substring()\l+ substring()\l+ indexOf()\l+ lastIndexOf()\l+ lastIndexOf()\l+ copy()\l+ merge()\l+ hashCode()\l+ boolValue()\l+ intValue()\l+ uintValue()\l+ longValue()\l+ ulongValue()\l+ floatValue()\l+ doubleValue()\l+ toBool()\l+ operator=()\l+ operator=()\l+ operator=()\l+ operator+=()\l+ operator const char *()\l+ operator std::string()\l+ fromHex()\l+ fromOct()\l+ fromSci()\l+ fromSci()\l- fromAscii()\l- fromUtf8()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_string.html",tooltip="The String class represents character strings."];
  Node14 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node20 [label="{Sylph::BoolConvertible\< T \>\n||+ operator bool_type()\l# ~BoolConvertible()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_bool_convertible.html",tooltip="Implementation of the Safe Bool Idiom."];
  Node20 -> Node16 [dir=back,color="orange",fontsize="10",style="dashed",label="\<OutputStream\>",fontname="FreeSans"];
  Node20 -> Node17 [dir=back,color="orange",fontsize="10",style="dashed",label="\<PrintWriter\>",fontname="FreeSans"];
  Node20 -> Node18 [dir=back,color="orange",fontsize="10",style="dashed",label="\<String\>",fontname="FreeSans"];
  Node20 -> Node15 [dir=back,color="orange",fontsize="10",style="dashed",label="\<InputStream\>",fontname="FreeSans"];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node1 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node21 [label="{Sylph::Hashable\n||+ hashCode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_hashable.html",tooltip="Interface to indicate this object provides its own hashCode function."];
  Node21 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node1 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node22 [label="{Sylph::SylphIterator\< Iter \>\n|- itr\l|+ SylphIterator()\l+ ~SylphIterator()\l+ hasNext()\l+ next()\l+ hasPrevious()\l+ previous()\l+ front()\l+ back()\l+ nextIndex()\l+ previousIndex()\l+ set()\l+ operator++()\l+ operator--()\l+ operator++()\l+ operator--()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_sylph_iterator.html",tooltip="SylphIterator provides a easier-to-use wrapper around STL iterators."];
}
