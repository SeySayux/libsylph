digraph G
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{Sylph::Exception\n|+ tracemsg\l# _reason\l|+ Exception()\l+ ~Exception()\l+ what()\l+ name()\l+ addTraceMessage()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node2 [label="{Sylph::ArrayException\n||+ ArrayException()\l+ name()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_array_exception.html",tooltip="A generic Exception when an error occurs with an Array."];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node3 [label="{Sylph::FileException\n||+ FileException()\l+ name()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_file_exception.html",tooltip="A genreric Exception which gets thrown whenever something goes wrong in the File..."];
  Node1 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node4 [label="{Sylph::IllegalArgumentException\n||+ IllegalArgumentException()\l+ name()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_illegal_argument_exception.html",tooltip="Generic exception to flag an argument with an illegal state was passed to an function..."];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node5 [label="{Sylph::IllegalStateException\n||+ IllegalStateException()\l+ name()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_illegal_state_exception.html",tooltip="Generic exception to flag that a method is not supported in the current state of..."];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node6 [label="{Sylph::IOException\n||+ IOException()\l+ name()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_i_o_exception.html",tooltip="This is a generic exception for I/O errors."];
  Node1 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node7 [label="{Sylph::NullPointerException\n||+ NullPointerException()\l+ name()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_null_pointer_exception.html",tooltip="This Exception gets thrown when a pointer to NULL is passed to a function or method..."];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node8 [label="{Sylph::SerializationException\n||+ SerializationException()\l+ name()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_sylph_1_1_serialization_exception.html",tooltip="This Exception gets thrown if there is a problem with serializing or deserializing..."];
}
